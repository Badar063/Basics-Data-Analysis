Explanation of Code
ðŸ”¹ Step 1: Data Preparation
We simulate a dataset of 8 customers with key features:
â€¢	TotalOrders: Frequency of purchases
â€¢	TotalSpent: Total money spent
â€¢	LastPurchaseDaysAgo: Recency
This data can be sourced from CRM systems, sales databases, or transaction logs.
________________________________________
ðŸ”¹ Step 2: RFM-Based Segmentation
We classify each customer using simple RFM-style rules:
â€¢	High-Value: Spent > Â£1000, made >10 purchases, and bought recently (within 15 days)
â€¢	Mid-Value: Moderate spenders with decent purchase frequency
â€¢	Low-Value: Infrequent or small spenders, often long inactive
This can be extended using quantiles, clustering (KMeans), or machine learning models for large datasets.
________________________________________
ðŸ”¹ Step 3: Segment Summary
We generate a summary table showing average order volume and spend per segment, helping highlight:
â€¢	Revenue concentration
â€¢	Order behavior differences
â€¢	Customer priority levels
________________________________________
ðŸ”¹ Step 4: Visualization
The scatter plot displays each customer by orders and spend, colored by segment:
â€¢	Top-right = high-value cluster
â€¢	Center = mid-value
â€¢	Bottom-left = low-value (potential churners)
________________________________________
ðŸŽ¯ Insights & Actions
Segment	Behavior Summary	Recommended Action
High-Value	Frequent, recent, and high spenders	Loyalty rewards, early access to offers
Mid-Value	Decent spenders, less recent	Upsell, re-engagement campaigns
Low-Value	Rarely buy, low spend or long inactive	Email triggers, win-back offers
________________________________________
âœ… Benefits of This Analysis
â€¢	Increase marketing ROI through targeted strategies
â€¢	Enhance customer satisfaction via personalized offers
â€¢	Boost retention and lifetime value
â€¢	Reduce churn by identifying at-risk segments early

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Simulate Customer Purchase Dataset
data = {
    'CustomerID': [101, 102, 103, 104, 105, 106, 107, 108],
    'TotalOrders': [15, 4, 1, 9, 12, 3, 7, 20],
    'TotalSpent': [1500, 450, 50, 950, 1200, 200, 650, 2100],
    'LastPurchaseDaysAgo': [5, 45, 300, 12, 7, 180, 30, 3]
}
df = pd.DataFrame(data)

# 2. RFM Segmentation
def classify_customer(row):
    if row['TotalSpent'] > 1000 and row['TotalOrders'] > 10 and row['LastPurchaseDaysAgo'] < 15:
        return 'High-Value'
    elif row['TotalSpent'] > 500 and row['TotalOrders'] > 5:
        return 'Mid-Value'
    else:
        return 'Low-Value'

df['Segment'] = df.apply(classify_customer, axis=1)

# 3. Summary by Segment
segment_summary = df.groupby('Segment')[['TotalOrders', 'TotalSpent']].mean().round(1)
print("\n--- Customer Segment Summary ---")
print(segment_summary)

# 4. Visualize Segments
sns.set(style="whitegrid")
plt.figure(figsize=(8, 5))
sns.scatterplot(data=df, x="TotalOrders", y="TotalSpent", hue="Segment", s=100, palette="Set2")
plt.title("Customer Segments: Total Orders vs. Spending")
plt.xlabel("Total Orders")
plt.ylabel("Total Spent (Â£)")
plt.tight_layout()
plt.show()
